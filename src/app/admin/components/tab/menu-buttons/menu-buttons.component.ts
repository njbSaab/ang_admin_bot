import { Component, OnInit } from '@angular/core';
import { MainButtonsMenuService } from '../../../../shared/services/main-buttons-menu.service';
import { MenuTable } from '../../../../interfaces/menu-table.interface';
import { InlineButtonsMenuIndexService } from '../../../../shared/services/inline-buttons-menu-index.service';
import {MenuButtonService} from '../../../../shared/services/menu-button.service';
import { MenuButton } from '../../../../interfaces/menu-button.interface';
// –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Ç–∏–ø —Å –ø–æ–ª–µ–º isEditing
type EditableMenuTable = MenuTable & { isEditing?: boolean };

@Component({
  selector: 'app-menu-buttons',
  templateUrl: './menu-buttons.component.html',
  styleUrls: ['./menu-buttons.component.scss'],
})
export class MenuButtonsComponent implements OnInit {
  menuTables: EditableMenuTable[] = []; // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Ç–∏–ø
  successMessage: string | null = null;
  errorMessage: string | null = null;
  activeIndex: number | null = null;
  isEditing: boolean = false
  constructor(
    private menuService: MainButtonsMenuService,
    private inlineButtonsService: InlineButtonsMenuIndexService,
    private menuButtonService: MenuButtonService
  ) {}

  ngOnInit(): void {
    this.loadMenuTables();
    // this.loadPostButtons()
  }

  loadMenuTables(): void {
    this.menuService.getMenuTables().subscribe({
      next: (data) => {
        this.menuTables = data.map((table) => ({ ...table, isEditing: false, buttons: [] }));
        console.log('‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ menuTables', this.menuTables);
  
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü
        this.loadPostButtons();
      },
      error: () => {
        this.errorMessage = '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö';
      },
    });
  }

  loadPostButtons(): void {
    this.inlineButtonsService.getPostButtons().subscribe({
      next: (postButtons) => {
        console.log('üîπ –ó–∞–≥—Ä—É–∂–µ–Ω—ã —Å–≤—è–∑–∏ –ø–æ—Å—Ç–æ–≤ –∏ –∫–Ω–æ–ø–æ–∫:', postButtons);
        
        postButtons.forEach(btn => {
          console.log(`–ö–Ω–æ–ø–∫–∞ —Å ID: ${btn.button?.id} –ø—Ä–∏–≤—è–∑–∞–Ω–∞ –∫ –ø–æ—Å—Ç—É —Å ID: ${btn.post?.id}`);
        });
  
        const buttonIds = postButtons.map(btn => btn.button?.id);
        console.log('üìå ID –∫–Ω–æ–ø–æ–∫:', buttonIds);
  
        this.menuButtonService.getButtons().subscribe({
          next: (allButtons) => {
            console.log('‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω—ã –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–Ω–æ–ø–æ–∫:', allButtons);
  
            this.menuTables.forEach((table) => {
              if (table.linked_post) {
                console.log(`–ü–æ—Å—Ç —Å ID ${table.linked_post.id} —Å–≤—è–∑–∞–Ω —Å –∫–Ω–æ–ø–∫–∞–º–∏:`);
                table.buttons = postButtons
                  .filter((btn) => btn.post?.id === table.linked_post?.id)
                  .map((btn) => {
                    const foundButton = allButtons.find((b) => b.id === btn.button?.id);
                    console.log(`–î–ª—è –ø–æ—Å—Ç–∞ ${btn.post?.id} –Ω–∞—à–ª–∏ –∫–Ω–æ–ø–∫—É:`, foundButton);
                    return foundButton;
                  })
                  .filter((btn): btn is MenuButton => btn !== undefined);
  
                console.log('–ö–Ω–æ–ø–∫–∏ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã:', table.buttons);
              }
            });
  
            console.log('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏:', this.menuTables);
          },
          error: () => {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫');
          },
        });
      },
      error: () => {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–≤—è–∑–µ–π –∫–Ω–æ–ø–æ–∫');
      },
    });
  }

  toggleEdit(table: EditableMenuTable): void {
    table.isEditing = !table.isEditing;
    this.clearMessages();
  }

  saveChanges(table: EditableMenuTable): void {
    this.menuService.updateMenuTable(table.id, table).subscribe({
      next: () => {
        this.successMessage = '–ò–∑–º–µ–Ω–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!';
        table.isEditing = false;
        setTimeout(() => {
          this.closeMessages();
        }, 3000);  
      },
      error: () => {
        this.errorMessage = '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö';
      },
    });
  }

  clearMessages(): void {
    this.successMessage = null;
    this.errorMessage = null;
  }
  // –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –æ–± —É—Å–ø–µ—Ö–µ –∏ –æ—à–∏–±–∫–∞—Ö
  closeMessages(): void {
    this.successMessage = null;
    this.errorMessage = null;
  }
  toggleClick(index: number): void {
    this.activeIndex = this.activeIndex === index ? null : index;
  }
  toggleClickBtn(index: number):void{
    this.activeIndex = this.activeIndex === index ? null : index;
    this.isEditing = !this.isEditing
  }
}