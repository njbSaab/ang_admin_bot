import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable } from 'rxjs';
import { environment } from '../../../environments/environment';
import { NewsBot } from '../../interfaces/news-bot.interface';

@Injectable({
  providedIn: 'root',
})
export class NewsBotService {
  private apiUrl = environment.auth.apiUrl; 
  
  constructor(private http: HttpClient) {}

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –Ω–æ–≤–æ—Å—Ç–µ–π
  getNews(): Observable<NewsBot[]> {
    return this.http.get<NewsBot[]>(`${this.apiUrl}news`);
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏
  updateNews(id: number, updateData: Partial<NewsBot>): Observable<NewsBot> {
    return this.http.put<NewsBot>(`${this.apiUrl}news/${id}`, updateData);
  }
}





<section class="news-bot w-full pb-[25px]">
  <!-- –ó–∞–≥–æ–ª–æ–≤–æ–∫ -->
  <div
    class="header-tab flex items-center justify-between px-[20px] py-[10px] my-[30px] mb-0 rounded-[20px] w-[70%] mx-auto bg-gradient-to-r from-indigo-500 to-purple-500 iten"
  >
    <h2 class="text-xl font-bold text-white">News bot</h2>
    <p class="text-right text-white flex gap-2 items-center">
      –í—Å–µ–≥–æ –Ω–æ–≤–æ—Å—Ç–µ–π:
      <span class="font-bold text-2xl">{{ newsItems.length }}</span>
    </p>
  </div>

  <!-- –°–ø–∏—Å–æ–∫ –Ω–æ–≤–æ—Å—Ç–µ–π -->
  <div *ngIf="!loading; else loadingTemplate">
    <div *ngFor="let news of newsItems; index as i" class="news-card mb-8 mt-4">
      <div
        class="flex items-center justify-between w-[70%] mx-auto pt-[20px] mb-[20px]"
      >
        <p class="text-lg font-bold text-indigo-600 nj-toast-gradient">
          üìù –ù–æ–≤–æ—Å—Ç—å ‚Ññ{{ i + 1 }}
        </p>
        <div class="card-date flex items-center gap-2">
          <p class="text-xs text-gray-500">
            –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {{ news.created_at | date: "medium" }}
          </p>
        </div>
      </div>

      <div
        *ngIf="!news.isEditing; else editMode"
        class="card-body news-body hover-shadow m-[20px] rounded-[35px] p-0"
      >
        <div
          class="img-wrapper w-full h-[350px] relative"
          *ngIf="news.post_image_url"
        >
          <figure *ngIf="news.post_image_url">
            <img
              [src]="news.post_image_url"
              alt="Post Image"
              class="rounded-[35px]"
            />
          </figure>
        </div>
        <div
          class="card-content-wrapp p-[40px] pt-[20px] bg-white z-10 rounded-[35px]"
        >
          <div class="card-header flex justify-around items-center">
            <p class="text-lg text-gray-600 font-bold flex-[80%]">
              –ö–∞—Ç–µ–≥–æ—Ä–∏—è:
              <span
                class="nj-toast-gradient bg-gradient-to-r from-indigo-500 to-purple-500 iten"
                >{{ news.category.name }}</span
              >
            </p>
            <p
              class="w-fit text-gray-400 text-sm flex items-center justify-center"
            >
              isActive:

              <svg
                *ngIf="news.isActive"
                class=""
                xmlns="http://www.w3.org/2000/svg"
                width="30"
                height="30"
                viewBox="0 0 24 24"
              >
                <g
                  fill="none"
                  stroke="#3f9f52cb"
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  stroke-width="2"
                >
                  <path
                    stroke-dasharray="64"
                    stroke-dashoffset="64"
                    d="M3 12c0 -4.97 4.03 -9 9 -9c4.97 0 9 4.03 9 9c0 4.97 -4.03 9 -9 9c-4.97 0 -9 -4.03 -9 -9Z"
                  >
                    <animate
                      fill="freeze"
                      attributeName="stroke-dashoffset"
                      dur="0.6s"
                      values="64;0"
                    />
                  </path>
                  <path
                    stroke-dasharray="14"
                    stroke-dashoffset="14"
                    d="M8 12l3 3l5 -5"
                  >
                    <animate
                      fill="freeze"
                      attributeName="stroke-dashoffset"
                      begin="0.6s"
                      dur="0.2s"
                      values="14;0"
                    />
                  </path>
                </g>
              </svg>
              <svg
                *ngIf="!news.isActive"
                xmlns="http://www.w3.org/2000/svg"
                width="30"
                height="30"
                viewBox="0 0 24 24"
              >
                <g
                  fill="none"
                  stroke="#ff4400"
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  stroke-width="2"
                >
                  <path
                    stroke-dasharray="64"
                    stroke-dashoffset="64"
                    d="M12 3c4.97 0 9 4.03 9 9c0 4.97 -4.03 9 -9 9c-4.97 0 -9 -4.03 -9 -9c0 -4.97 4.03 -9 9 -9Z"
                  >
                    <animate
                      fill="freeze"
                      attributeName="stroke-dashoffset"
                      dur="0.6s"
                      values="64;0"
                    />
                  </path>
                  <path
                    stroke-dasharray="8"
                    stroke-dashoffset="8"
                    d="M12 12l4 4M12 12l-4 -4M12 12l-4 4M12 12l4 -4"
                  >
                    <animate
                      fill="freeze"
                      attributeName="stroke-dashoffset"
                      begin="0.6s"
                      dur="0.2s"
                      values="8;0"
                    />
                  </path>
                </g>
              </svg>
            </p>
          </div>
          <h3
            class="collapse-title text-indigo-400 bg-reg peer-checked:bg-primary peer-checked:text-white font-bold text-lg pl-0 pb-4 min-h-2"
          >
            <!-- <span class="text-xs text-gray-400"> –ó–∞–≥–æ–ª–æ–≤–æ–∫:</span>
          <br /> -->
            {{ news.post_title }}
          </h3>
          <p class="text-sm">
            <!-- <span class="text-xs text-gray-400">–¢–µ–ª–æ –Ω–æ–≤—Å—Ç–∏:</span>
          <br /> -->
            {{ news.post_content }}
          </p>
          <div class="text-right">
            <button class="btn btn-ghost pr-0" (click)="toggleEdit(news)">
              –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
              <span class="btn btn-primary">
                <app-edit-icon></app-edit-icon>
              </span>
            </button>
          </div>
        </div>
      </div>
      <div *ngIf="!news.isEditing" class="btn-news w-main px-6">
        <p class="text-lg text-black my-2 font-bold">–ö–Ω–æ–ø–∫–∞ –Ω–æ–≤–æ—Å—Ç–∏:</p>
        <div
          *ngIf="news.news_url"
          class="flex items-center gap-2 nj-toast-gradient text-white"
        >
          <span class="text-lg text-white font-bold text-nowrap">
            –°—Å—ã–ª–∫–∞ –∫–Ω–æ–ø–∫–∏:</span
          >
          <a
            [href]="news.news_url"
            target="_blank"
            class="underline text-sm text-nowrap overflow-x-auto"
            >{{ news.news_url }}</a
          >
        </div>
      </div>

      <!-- –†–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è -->
      <ng-template #editMode>
        <div class="card-body hover-shadow rounded-xl px-[40px] mx-[20px]">
          <div
            class="flex flex-col items-start btn btn-ghost btn-access w-fit mb-2"
          >
            <label class="label cursor-pointer">
              <span class="block text-lg font-bold pr-1"> Is active ? </span>
              <input
                type="checkbox"
                checked="checked"
                class="checkbox checkbox-success"
                [(ngModel)]="news.isActive"
              />
            </label>
          </div>
          <div class="">
            <label class="block text-sm text-indigo-400 font-bold">
              –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏:</label
            >
            <input
              [(ngModel)]="news.post_title"
              class="input w-full mb-4 border border-gray-300 rounded-lg px-4 py-2.5 focus:ring focus:ring-blue-300 focus:ring-opacity-40"
              placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏"
            />
          </div>
          <div class="">
            <label class="block text-sm text-indigo-400 font-bold">
              –ö–æ–Ω—Ç–µ–Ω—Ç –Ω–æ–≤–æ—Å—Ç–∏:</label
            >
            <textarea
              [(ngModel)]="news.post_content"
              class="w-full h-40 border rounded-lg px-4 py-2 focus:ring focus:ring-blue-300 focus:ring-opacity-40 focus-visible:no-underline text-sm"
              placeholder="–ö–æ–Ω—Ç–µ–Ω—Ç –Ω–æ–≤–æ—Å—Ç–∏"
            ></textarea>
          </div>
          <div class="">
            <label class="block text-sm text-indigo-400 font-bold">
              –°—Å—ã–ª–∫–∞ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:</label
            >
            <input
              [(ngModel)]="news.post_image_url"
              class="input w-full mb-4 border border-gray-300 rounded-lg px-4 py-2.5 focus:ring focus:ring-blue-300 focus:ring-opacity-40 text-sm"
              placeholder="URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"
            />
            <div
              class="img-wrapper w-[350px] h-auto relative"
              *ngIf="news.post_image_url"
            >
              <figure *ngIf="news.post_image_url">
                <img
                  [src]="news.post_image_url"
                  alt="Post Image"
                  class="rounded-[35px]"
                />
              </figure>
            </div>
          </div>
          <div class="">
            <label class="block text-sm text-indigo-400 font-bold">
              –ö–∞—Ç–µ–≥–æ—Ä–∏—è</label
            >
            <select
              [(ngModel)]="news.category"
              class="select select-bordered input w-full mb-4 border border-gray-300 rounded-lg px-4 py-2.5 focus:ring focus:ring-blue-300 focus:ring-opacity-40"
            >
              <option value="football">Football</option>
              <option value="basketball">Basketball</option>
              <option value="box">Box</option>
              <option value="ufc">UFC</option>
            </select>
          </div>
          <div class="">
            <label class="block text-sm text-indigo-400 font-bold">
              –°—Å—ã–ª–∫–∞ –Ω–∞ –Ω–æ–≤–æ—Å—Ç—å</label
            >
            <input
              [(ngModel)]="news.news_url"
              class="input w-full mb-4 border border-gray-300 rounded-lg px-4 py-2.5 focus:ring focus:ring-blue-300 focus:ring-opacity-40 text-sm"
              placeholder="URL –Ω–æ–≤–æ—Å—Ç–∏"
            />
          </div>
          <div class="flex justify-end gap-4">
            <button class="btn btn-danger" (click)="toggleEdit(news)">
              <svg
                xmlns="http://www.w3.org/2000/svg"
                width="35"
                height="40"
                viewBox="0 0 24 24"
              >
                <path
                  fill="#fff"
                  stroke="#fff"
                  stroke-dasharray="12"
                  stroke-dashoffset="12"
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  stroke-width="2.5"
                  d="M12 12l7 7M12 12l-7 -7M12 12l-7 7M12 12l7 -7"
                >
                  <animate
                    fill="freeze"
                    attributeName="stroke-dashoffset"
                    dur="0.3s"
                    values="12;0"
                  />
                </path>
              </svg>
            </button>
            <button class="btn pr-0 text-success" (click)="saveChanges(news)">
              –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
              <span class="btn btn-accent">
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  width="30"
                  height="30"
                  viewBox="0 0 24 24"
                >
                  <path
                    fill="none"
                    stroke="#fff"
                    stroke-dasharray="24"
                    stroke-dashoffset="24"
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    stroke-width="2.7"
                    d="M5 11l6 6l10 -10"
                  >
                    <animate
                      fill="freeze"
                      attributeName="stroke-dashoffset"
                      dur="0.96s"
                      values="24;0"
                    />
                  </path>
                </svg>
              </span>
            </button>
          </div>
        </div>
      </ng-template>
    </div>
  </div>

  <!-- –®–∞–±–ª–æ–Ω –∑–∞–≥—Ä—É–∑–∫–∏ -->
  <ng-template #loadingTemplate>
    <div class="isLoading fixed z-10">
      <svg
        xmlns="http://www.w3.org/2000/svg"
        width="300"
        height="300"
        viewBox="0 0 24 24"
        class=""
      >
        <defs>
          <radialGradient id="gradient1" cx="50%" cy="50%" r="50%">
            <stop offset="0%" stop-color="oklch(51.01% 0.274 263.83)" />
            <stop offset="100%" stop-color="#4f45e5" />
          </radialGradient>
          <radialGradient id="gradient2" cx="50%" cy="50%" r="50%">
            <stop offset="0%" stop-color="oklch(47.66% 0.246 305.88)" />
            <stop offset="100%" stop-color="#818cf8" />
          </radialGradient>
          <radialGradient id="gradient3" cx="50%" cy="50%" r="50%">
            <stop offset="0%" stop-color="#4f45e5" />
            <stop offset="100%" stop-color="#8845e5" />
          </radialGradient>
        </defs>
        <circle cx="12" cy="12" r="0" fill="url(#gradient1)">
          <animate
            id="svgSpinnersPulseMultiple0"
            fill="freeze"
            attributeName="r"
            begin="0;svgSpinnersPulseMultiple2.end"
            calcMode="spline"
            dur="1.2s"
            keySplines=".52,.6,.25,.99"
            values="0;11"
          />
          <animate
            fill="freeze"
            attributeName="opacity"
            begin="0;svgSpinnersPulseMultiple2.end"
            calcMode="spline"
            dur="1.2s"
            keySplines=".52,.6,.25,.99"
            values="1;0"
          />
        </circle>
        <circle cx="12" cy="12" r="0" fill="url(#gradient2)">
          <animate
            id="svgSpinnersPulseMultiple1"
            fill="freeze"
            attributeName="r"
            begin="svgSpinnersPulseMultiple0.begin+0.2s"
            calcMode="spline"
            dur="1.2s"
            keySplines=".52,.6,.25,.99"
            values="0;11"
          />
          <animate
            fill="freeze"
            attributeName="opacity"
            begin="svgSpinnersPulseMultiple0.begin+0.2s"
            calcMode="spline"
            dur="1.2s"
            keySplines=".52,.6,.25,.99"
            values="1;0"
          />
        </circle>
        <circle cx="12" cy="12" r="0" fill="url(#gradient3)">
          <animate
            id="svgSpinnersPulseMultiple2"
            fill="freeze"
            attributeName="r"
            begin="svgSpinnersPulseMultiple0.begin+0.4s"
            calcMode="spline"
            dur="1.2s"
            keySplines=".52,.6,.25,.99"
            values="0;11"
          />
          <animate
            fill="freeze"
            attributeName="opacity"
            begin="svgSpinnersPulseMultiple0.begin+0.4s"
            calcMode="spline"
            dur="1.2s"
            keySplines=".52,.6,.25,.99"
            values="1;0"
          />
        </circle>
      </svg>
    </div>
  </ng-template>

  <!-- –°–æ–æ–±—â–µ–Ω–∏—è –æ–± —É—Å–ø–µ—Ö–µ –∏ –æ—à–∏–±–∫–µ -->
  <div
    *ngIf="successMessage"
    class="alert alert-success mb-4 relative flex justify-between"
  >
    <b> {{ successMessage }} </b>
    <span class="close" (click)="closeSuccessMessage()">
      <svg
        xmlns="http://www.w3.org/2000/svg"
        width="36"
        height="36"
        viewBox="0 0 24 24"
      >
        <path
          fill="currentColor"
          d="M12 2C6.47 2 2 6.47 2 12s4.47 10 10 10s10-4.47 10-10S17.53 2 12 2m0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8s8 3.59 8 8s-3.59 8-8 8m3.59-13L12 10.59L8.41 7L7 8.41L10.59 12L7 15.59L8.41 17L12 13.41L15.59 17L17 15.59L13.41 12L17 8.41z"
        />
      </svg>
    </span>
  </div>

  <div *ngIf="errorMessage" class="alert alert-error relative">
    {{ errorMessage }}
    <span class="close" (click)="closeErrorMessage()">
      <svg
        xmlns="http://www.w3.org/2000/svg"
        width="36"
        height="36"
        viewBox="0 0 24 24"
      >
        <path
          fill="currentColor"
          d="M12 2C6.47 2 2 6.47 2 12s4.47 10 10 10s10-4.47 10-10S17.53 2 12 2m0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8s8 3.59 8 8s-3.59 8-8 8m3.59-13L12 10.59L8.41 7L7 8.41L10.59 12L7 15.59L8.41 17L12 13.41L15.59 17L17 15.59L13.41 12L17 8.41z"
        />
      </svg>
    </span>
  </div>
</section>




import { Component, OnInit } from '@angular/core';
import { NewsBotService } from '../../../../shared/services/news-bot.service';
import { NewsBot } from '../../../../interfaces/news-bot.interface';

@Component({
  selector: 'app-news-bot',
  templateUrl: './news-bot.component.html',
  styleUrls: ['./news-bot.component.scss']
})
export class NewsBotComponent implements OnInit {
  newsItems: (NewsBot & { isEditing?: boolean })[] = [];
  loading: boolean = true;
  successMessage: string | null = null;
  errorMessage: string | null = null;

  constructor(private newsBotService: NewsBotService) {}

/*************  ‚ú® Codeium Command ‚≠ê  *************/
/**
 * Lifecycle hook that is called after data-bound properties of a directive are initialized.
 * This method loads the news items by calling the loadNews function.
 */

/******  ca5d5ee6-88a3-48eb-9bcf-4a7c13ec52b7  *******/
  ngOnInit(): void {
    this.loadNews();
  }

  loadNews(): void {
    this.newsBotService.getNews().subscribe({
      next: (data) => {
        // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–ª–∞–≥ isEditing –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ (–¥–ª—è —Ä–µ–∂–∏–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
        this.newsItems = data.map(news => ({ ...news, isEditing: false }));
        console.log("NEWS",this.newsItems);
        
        this.loading = false;
      },
      error: (err) => {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–æ–≤–æ—Å—Ç–µ–π:', err);
        this.errorMessage = '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–æ–≤–æ—Å—Ç–µ–π';
        this.loading = false;
      }
    });
  }

  // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –Ω–æ–≤–æ—Å—Ç–∏
  toggleEdit(news: NewsBot & { isEditing?: boolean }): void {
    news.isEditing = !news.isEditing;
    this.clearMessages();
  }

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–æ–≤–æ—Å—Ç–∏
  saveChanges(news: NewsBot & { isEditing?: boolean }): void {
    const updateData: Partial<NewsBot> = {
      post_title: news.post_title,
      post_content: news.post_content,
      post_image_url: news.post_image_url,
      category: news.category,
      isActive: news.isActive,
      news_url: news.news_url,
    };

    this.newsBotService.updateNews(news.id, updateData).subscribe({
      next: (updatedNews) => {
        news.isEditing = false;
        this.successMessage = '–ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!';
        setTimeout(() => this.closeSuccessMessage(), 3000);
      },
      error: (err) => {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–æ–≤–æ—Å—Ç–∏:', err);
        this.errorMessage = '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π';
        setTimeout(() => this.closeErrorMessage(), 3000);
      }
    });
  }

  // –ú–µ—Ç–æ–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –æ–± —É—Å–ø–µ—Ö–µ/–æ—à–∏–±–∫–µ
  closeSuccessMessage(): void {
    this.successMessage = null;
  }

  closeErrorMessage(): void {
    this.errorMessage = null;
  }

  clearMessages(): void {
    this.successMessage = null;
    this.errorMessage = null;
  }
}





export interface NewsBot {
    id: number;
    post_title: string;
    post_content: string;
    post_image_url?: string;
    category: {
      id: number;
      name: string;
      description: string;
      creatAt: Date;
      updatedAt: Date;
    }
    isActive: boolean;
    news_url?: string;
    created_at: Date;
    updated_at: Date;
  }



  